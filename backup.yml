- hosts: all
  connection: network_cli
  # gather_facts: false # commented for ansible_date_time
  vars:
    backup_basename: "{{ identity.stdout_lines[0] }}"
    backup_datetime: "{{ ansible_date_time.date }}-{{ ansible_date_time.time | replace(':', '-') }}"
    backup_extension: "backup"
    config_extension: "rsc"
    backup_name: "{{ backup_datetime }}_{{ backup_basename }}_{{ inventory_hostname }}.{{ backup_extension }}"
    config_name: "{{ backup_datetime }}_{{ backup_basename }}_{{ inventory_hostname }}.{{ config_extension }}"
    backup_directory_path: "out/{{ backup_path | default('ungrouped') }}"
    backup_retention_value: "{{ backup_retention | default('7d') }}"

  tasks:
    - name: do backup
      routeros_command:
        commands: /system backup save name=[/system identity get name]

    - name: do export
      routeros_command:
        commands: /export file=[/system identity get name]

    - name: get identity from RouterOS device
      routeros_command:
        commands: /system identity print
      register: dev_identity

    - name: get identity from string
      shell: echo {{ dev_identity.stdout_lines }} | cut -d':' -f 2 | cut -c2- |  rev | cut -c3- | rev
      register: identity

    - name: create backup folder if not exists
      ansible.builtin.file:
        path: "{{ backup_directory_path }}"
        state: directory

    - name: get backup
      ansible.netcommon.net_get:
        src: "{{ backup_basename }}.{{ backup_extension }}"
        dest: "{{ backup_directory_path }}/{{ backup_name }}"
        protocol: sftp

    - name: get config
      ansible.netcommon.net_get:
        src: "{{ backup_basename }}.{{ config_extension }}"
        dest: "{{ backup_directory_path }}/{{ config_name }}"
        protocol: sftp

    - name: Send backup to Telegram
      ansible.builtin.command: >
        curl -s -X POST "https://api.telegram.org/bot{{ telegram_bot_token }}/sendDocument"
        -F chat_id="{{ telegram_chat_id }}"
        -F message_thread_id="{{ telegram_message_thread_id }}"
        -F document=@"{{ backup_directory_path }}/{{ backup_name }}"

    - name: Send config to Telegram
      ansible.builtin.command: >
        curl -s -X POST "https://api.telegram.org/bot{{ telegram_bot_token }}/sendDocument"
        -F chat_id="{{ telegram_chat_id }}"
        -F message_thread_id="{{ telegram_message_thread_id }}"
        -F document=@"{{ backup_directory_path }}/{{ config_name }}"

    - name: remove backup from routeros device
      routeros_command:
        commands: /file remove {{ backup_basename }}.{{ backup_extension }}

    - name: remove config from routeros device
      routeros_command:
        commands: /file remove {{ backup_basename }}.{{ config_extension }}

    - name: search backups older than backup retention days
      find:
        paths: "{{ backup_directory_path }}"
        age: "{{ backup_retention_value }}"
      register: backups_to_clear

    - name: removing older backups
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ backups_to_clear.files }}"
      when: backups_to_clear is defined and backups_to_clear | length > 0
